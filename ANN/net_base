#pragma once

#ifndef __NET_BASE__
#define __NET_BASE__

#include <chrono>
#include "net_matrix"

#define neunet_pure_type(type)      std::remove_reference_t<type>
#define neunet_copy_assert(type)    static_assert(std::is_copy_assignable_v<type>, "Type is not copy assignable.")

#define neunet_chrono_time_point    std::chrono::time_point_cast<std::chrono::milliseconds>(\
                                    std::chrono::system_clock::now()).time_since_epoch().count()
#define neunet_null_ref(type)       *(type*)nullptr

#include "net_base.hpp"

#endif