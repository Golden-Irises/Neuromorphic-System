/* データを探しましょう、主様。
 * Let's search the data, my master.
 * Kokkoro data structure
 * [SENSOR DATA]              [SYMBOL]
 * s0 s1 s2 s3 s4 s5 s6 s7 s8 syb
 *  0  0  0  0  0  0  0  0  0   #
 * symbol(syb)
 * ∅ -> 0
 * + -> 1
 * - -> 2
 * x -> 3
 * / -> 4
 */
#pragma once

#ifndef __KOKKORO_DATA__
#define __KOKKORO_DATA__

#define kokkoro_loop        while (true)
#define kokkoro_bytebitsz   0x08

#ifndef kokkoro_dcb_msg
#define kokkoro_dcb_msg     true
#endif

#ifndef kokkoro_dcb_start
#define kokkoro_dcb_start   0x3f
#endif

#ifndef kokkoro_data_segcnt
#define kokkoro_data_segcnt 0x03
#endif

#ifndef kokkoro_data_sensz
#define kokkoro_data_sensz  0x09
#endif

#ifndef kokkoro_data_bitsz
#define kokkoro_data_bitsz  0x02
#endif

#define kokkoro_data_bitcnt ((kokkoro_data_segcnt + 1) << kokkoro_data_segcnt)

/* Sensor arrangement
*************  array -> 3 * 3 = 9
* 0 * 0 * 0 *  symbol no.
*************  + | (1 0 0 0)
* 0 * 0 * 0 *  - | (0 1 0 0)
*************  x | (0 0 1 0)
* 0 * 0 * 0 *  / | (0 0 0 1)
*************  dim.= 4
* voltage threshold value (0 1 2 3)
*/ 
KOKKORO_BEGIN struct kokkoro_sensor { int sen_arr[kokkoro_data_sensz] = {0}; }; KOKKORO_END

#if kokkoro_dcb_msg
#include <bitset>
#endif
#include "../CSV/csv"
#include "../../COM/dcb.h"
#include "kokkoro_data.hpp"

#endif